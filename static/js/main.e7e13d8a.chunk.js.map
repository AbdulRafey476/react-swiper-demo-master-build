{"version":3,"sources":["components/Swipers/Swipers.js","App.js","serviceWorker.js","index.js"],"names":["ReactSwipers","useState","data","setData","setSwiper","useEffect","loadData","api_data","style","paddingTop","textAlign","className","length","map","item","onSwiper","id","tag","wrapperTag","navigation","pagination","loop","spaceBetween","slidesPerView","onInit","swiper","console","log","onSlideChange","activeIndex","onReachEnd","key","listStyleType","src","url","alt","title","width","SwiperCore","use","Navigation","Pagination","Thumbs","Controller","customHistory","createBrowserHistory","App","history","path","component","Swipers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"o9CASe,SAASA,IAAgB,IAAD,EAEbC,mBAAS,IAFI,mBAE9BC,EAF8B,KAExBC,EAFwB,OAITF,mBAAS,GAJA,mBAItBG,GAJsB,WAMrCC,qBAAU,WACRC,OAGF,IAAMA,EAAW,WACfH,EAAQI,IAQV,OACE,yBAAKC,MAAO,CAAEC,WAAY,SACxB,wBAAID,MAAO,CAAEE,UAAW,WAAxB,uBACA,yBAAKC,UAAU,kBACZT,GAAQA,EAAKU,OACVV,EAAKW,KAAI,SAACC,OAwBV,MAGLZ,GAAQA,EAAKU,OACZ,kBAAC,IAAD,CACEG,SAAUX,EACVY,GAAG,OACHC,IAAI,UACJC,WAAW,KACXC,YAAU,EACVC,YAAU,EACVC,MAAM,EACNC,aAAc,EACdC,cAAe,EACfC,OAAQ,SAACC,GAAD,OAAYC,QAAQC,IAAIF,EAAQ,uBACxCG,cAAe,SAACH,GAAD,OACbC,QAAQC,IAAIF,EAAQ,2BAA4BA,EAAOI,cAEzDC,WAAY,SAACL,GAAD,OAAYC,QAAQC,IAAIF,EAAQ,wBAE3CvB,EAAKW,KAAI,SAAAC,GAAI,OAAK,kBAAC,IAAD,CAAaiB,IAAKjB,EAAKE,GAAIC,IAAI,KAAKT,MAAO,CAAEwB,cAAe,SAC7E,yBAAKC,IAAKnB,EAAKoB,IAAKC,IAAKrB,EAAKsB,MAAO5B,MAAO,CAAE6B,MAAO,iCAIvD,MA3EVC,IAAWC,IAAI,CAACC,IAAYC,IAAYC,IAAQC,MCDzC,IAAMC,EAAgBC,cAEd,SAASC,IACtB,OACE,kBAAC,IAAD,CAAQC,QAASH,GACf,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWC,KCCbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACZ,EAAD,OAEFa,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.e7e13d8a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport SwiperCore, { Navigation, Pagination, Thumbs, Controller } from \"swiper\";\nimport \"swiper/swiper-bundle.css\";\nimport \"./Swipers.scss\";\nimport api_data from \"./data.json\"\n\nSwiperCore.use([Navigation, Pagination, Thumbs, Controller]);\n\nexport default function ReactSwipers() {\n\n  const [data, setData] = useState([]);\n\n  const [swiper, setSwiper] = useState(1);\n\n  useEffect(() => {\n    loadData()\n  });\n\n  const loadData = () => {\n    setData(api_data)\n  };\n\n  const thumbnailClick = (item) => {\n    swiper.slideTo(item.id);\n    // console.log(item.id + \" \" + swiper.activeIndex);\n  };\n\n  return (\n    <div style={{ paddingTop: \"20px\" }}>\n      <h2 style={{ textAlign: 'center' }}>MASTER WIZR Modules</h2>\n      <div className=\"container2-div\" >\n        {data && data.length\n          ? data.map((item) => (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a\n              style={{ padding: '10px', cursor: \"pointer\" }}\n              // className={\n              //   item.id === swiper.activeIndex\n              //     ? \"thumbnailActive\"\n              //     : swiper.activeIndex === 7 && item.id === 1\n              //       ? \"thumbnailActive\"\n              //       : swiper.activeIndex === 0 && item.id === 6\n              //         ? \"thumbnailActive\"\n              //         : \"\"\n              // }\n              key={item.id}\n              onClick={() => thumbnailClick(item)}\n            >\n              <img\n                className=\"thumbnail\"\n                src={item.thumbnailUrl}\n                alt={item.title}\n              />\n              <p>{item.title.split(\" \")[0]}</p>\n            </a>\n          ))\n          : null}\n      </div>\n\n      {data && data.length ? (\n        <Swiper\n          onSwiper={setSwiper}\n          id=\"main\"\n          tag=\"section\"\n          wrapperTag=\"ul\"\n          navigation\n          pagination\n          loop={true}\n          spaceBetween={0}\n          slidesPerView={1}\n          onInit={(swiper) => console.log(swiper, \"Swiper initialized\")}\n          onSlideChange={(swiper) =>\n            console.log(swiper, \"Slide index changed to: \", swiper.activeIndex)\n          }\n          onReachEnd={(swiper) => console.log(swiper, \"Swiper end reached\")}\n        >\n          {data.map(item => (<SwiperSlide key={item.id} tag=\"li\" style={{ listStyleType: \"none\" }} >\n            <img src={item.url} alt={item.title} style={{ width: \"-webkit-fill-available\" }} />\n          </SwiperSlide>)\n          )}\n        </Swiper>\n      ) : null}\n    </div>\n  );\n}\n","import React from 'react';\nimport { Router, Route } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nimport Swipers from './components/Swipers/Swipers';\n\nexport const customHistory = createBrowserHistory();\n\nexport default function App() {\n  return (\n    <Router history={customHistory}>\n      <Route path=\"/\" component={Swipers}></Route>\n    </Router>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}